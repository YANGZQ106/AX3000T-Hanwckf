name: Build ImmortalWrt For AX300T  # 工作流名称：构建 OpenWrt

on:
  repository_dispatch:  # 当收到 repository_dispatch 事件时触发
  workflow_dispatch:    # 允许手动触发工作流
    inputs:
      ssh:
        description: 'SSH 连接到 Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  CONFIG_FILE: .config
  SELF_BEFORE_SH: before-update-custom.sh
  SELF_AFTER_SH: after-update-custom.sh
  TZ: Asia/Shanghai
  FEEDS_CONF: feeds.conf.default

jobs:
  build:
    runs-on: ubuntu-22.04  # 运行环境为 Ubuntu 22.04

    steps:
    - name: Check server performance  # 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Checkout  # 检出代码
      uses: actions/checkout@main

    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Optimize disk space
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /srcdir
        sudo chown $USER:$GROUPS /srcdir

    - name: Clone source code
      working-directory: /srcdir
      run: |
        echo "Free space:"
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /srcdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $SELF_BEFORE_SH
        cd openwrt
        $GITHUB_WORKSPACE/$SELF_BEFORE_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Install lucky
      run: |
        cd openwrt
        rm -rf package/lucky
        git clone https://github.com/gdy666/luci-app-lucky.git package/lucky

    # - name: Install argon
    #   run: |
    #     cd openwrt/package/lean
    #     rm -rf luci-theme-argon
    #     git clone -b master https://github.com/jerrykuku/luci-theme-argon.git luci-theme-argon

    - name: Load custom config
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $SELF_AFTER_SH
        cd openwrt
        $GITHUB_WORKSPACE/$SELF_AFTER_SH

    # - name: SSH connection to Actions  # 连接到 Actions 的 SSH
    #   uses: P3TERX/ssh2actions@v1.0.0
    #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
    #   env:
    #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 V=11
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_xiaomi-ax3000t" >>$GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Copy output to upload file
      run: |
        df -hT
        mkdir upload
        # cp openwrt/bin/targets/*/*/*.ubi upload/
        cp openwrt/bin/targets/*/*/*.bin upload/

    - name: Get current date
      run: echo "CURRENT_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV

    - name: Upload openWrt firmware to release
      uses: ncipollo/release-action@main
      with:
        tag: AX3000T_${{ env.CURRENT_DATE }}
        artifacts: upload/*
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          Hanwckf's ImmortalWrt Firmware For Xiaomi AX3000T Router

    # - name: Clean compile
    #   id: clean-compile
    #   run: |
    #     cd openwrt
    #     make clean

    # - name: Cache compile
    #   id: cache-compile
    #   uses: actions/cache/save@v4
    #   if: steps.compile.outputs.status == 'success' && !cancelled()
    #   with:
    #     path: openwrt
    #     key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/feeds.conf.default') }}

    
    # - name: Check space usage  # 检查空间使用情况
    #   if: (!cancelled())
    #   run: df -hT

    # - name: Upload bin directory  # 上传 bin 目录
    #   uses: actions/upload-artifact@main
    #   if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    #   with:
    #     name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: openwrt/bin

    # - name: Organize files  # 整理文件
    #   id: organize
    #   if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #   run: |
    #     cd openwrt/bin/targets/*/*
    #     rm -rf packages
    #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #     echo "status=success" >> $GITHUB_OUTPUT

    # - name: Upload firmware directory  # 上传固件目录
    #   uses: actions/upload-artifact@main
    #   if: steps.organize.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: ${{ env.FIRMWARE }}

    # - name: Generate release tag  # 生成发布标签
    #   id: tag
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
    #     touch release.txt
    #     [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
    #     [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
    #     echo "status=success" >> $GITHUB_OUTPUT


    - name: Delete workflow runs  # 删除工作流运行
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases  # 删除旧的发布版本
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
